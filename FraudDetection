Logistic regression model

This is a Binary classification 

# ===============================
# 📦 IMPORTING REQUIRED LIBRARIES
# ===============================
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import joblib
import streamlit as st

# Machine Learning Libraries
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer

# ========================
# 📂 LOAD & EXPLORE DATA
# ========================
df = pd.read_csv("AIML Dataset.csv")

st.title("📊 Fraud Detection ML Pipeline")
st.write("### Initial Data Overview")
st.write(df.head())

# ======================
# 🧼 CLEANING & CHECKING
# ======================
st.write("#### Dataset Info")
st.text(df.info())

st.write("Fraud Class Distribution:")
st.write(df["isFraud"].value_counts())

st.write("Missing Values:", df.isnull().sum().sum())

# =============================
# 📊 VISUAL EXPLORATION (EDA)
# =============================
# Plot Transaction Type Distribution
st.write("### Transaction Type Distribution")
df["type"].value_counts().plot(kind="bar", color="skyblue")
plt.xlabel("Type")
plt.ylabel("Count")
st.pyplot(plt)

# Fraud Rate by Type
fraud_by_type = df.groupby("type")["isFraud"].mean().sort_values(ascending=False)
fraud_by_type.plot(kind="bar", color="salmon")
plt.title("Fraud Rate by Transaction Type")
plt.ylabel("Fraud Rate")
st.pyplot(plt)

# Histogram of Amounts (Log Scale)
sns.histplot(np.log1p(df["amount"]), bins=100, kde=True, color="green")
plt.title("Transaction Amounts (Log Scale)")
plt.xlabel("Log(Amount + 1)")
st.pyplot(plt)

# Boxplot: Amount vs isFraud
sns.boxplot(data=df[df["amount"] < 50000], x="isFraud", y="amount")
plt.title("Transaction Amount by Fraud (Filtered)")
st.pyplot(plt)

# ============================
# 🧮 FEATURE ENGINEERING
# ============================
df["balanceDiffOrig"] = df["oldbalanceOrg"] - df["newbalanceOrig"]
df["balanceDiffDest"] = df["newbalanceDest"] - df["oldbalanceOrg"]

# ==========================
# 🧪 FRAUD TIME DISTRIBUTION
# ==========================
fraud_per_step = df[df["isFraud"] == 1]["step"].value_counts().sort_index()
plt.plot(fraud_per_step.index, fraud_per_step.values)
plt.title("Fraud Cases Over Time (Step)")
plt.xlabel("Step")
plt.ylabel("Fraud Count")
st.pyplot(plt)

# ==========================
# 🧹 PREPARE FOR MODELING
# ==========================
df.drop(columns=["step", "nameOrig", "nameDest", "isFlaggedFraud"], inplace=True)

# Separate Features & Target
X = df.drop("isFraud", axis=1)
y = df["isFraud"]

# Split Data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, stratify=y)

# Define Columns
numeric = ["amount", "oldbalanceOrg", "newbalanceOrig", "oldbalanceDest", "newbalanceDest"]
categorical = ["type"]

# =============================
# ⚙️ MACHINE LEARNING PIPELINE
# =============================
preprocessor = ColumnTransformer(transformers=[
    ("num", StandardScaler(), numeric),
    ("cat", OneHotEncoder(drop="first"), categorical)
])

pipeline = Pipeline(steps=[
    ("prep", preprocessor),
    ("clf", LogisticRegression(class_weight="balanced", max_iter=1000))
])

# ====================
# 🚀 TRAIN THE MODEL
# ====================
pipeline.fit(X_train, y_train)

# ============================
# 📈 EVALUATE THE PERFORMANCE
# ============================
y_pred = pipeline.predict(X_test)

st.write("### Classification Report")
st.text(classification_report(y_test, y_pred))

conf_matrix = confusion_matrix(y_test, y_pred)
st.write("Confusion Matrix:")
st.write(conf_matrix)

st.write("Accuracy Score (%):", round(pipeline.score(X_test, y_test) * 100, 2))

# ========================
# 💾 SAVE THE MODEL FILE
# ========================
joblib.dump(pipeline, "fraud_detection_pipeline.pkl")

# =========================
# 🧠 STREAMLIT INFERENCE UI
# =========================
st.title("💳 Fraud Prediction App")
st.markdown("Enter transaction details and click **Predict**")

# User Inputs
transaction_type = st.selectbox("Transaction Type", ["PAYMENT", "TRANSFER", "CASH_OUT", "DEBIT", "CASH_IN"])
amount = st.number_input("Amount", min_value=0.0, value=1000.0)
oldbalanceOrg = st.number_input("Old Balance Origin", min_value=0.0, value=5000.0)
newbalanceOrig = st.number_input("New Balance Origin", min_value=0.0, value=4000.0)
oldbalanceDest = st.number_input("Old Balance Destination", min_value=0.0, value=3000.0)
newbalanceDest = st.number_input("New Balance Destination", min_value=0.0, value=4000.0)

if st.button("Predict Fraud"):
    input_data = pd.DataFrame([{
        "type": transaction_type,
        "amount": amount,
        "oldbalanceOrg": oldbalanceOrg,
        "newbalanceOrig": newbalanceOrig,
        "oldbalanceDest": oldbalanceDest,
        "newbalanceDest": newbalanceDest
    }])

    model = joblib.load("fraud_detection_pipeline.pkl")
    prediction = model.predict(input_data)[0]

    if prediction == 1:
        st.error("⚠️ This transaction is likely FRAUDULENT!")
    else:
        st.success("✅ This transaction is likely SAFE.")

